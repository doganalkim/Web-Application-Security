WEB CACHE POISONING
-------------------

* This attack consists of two phases
-> The attacker must work out how to elicit a response from the back-end server that inadvertently contains some kind of dangerous payload
-> Once the first step is done, they need to make sure that their response is cached and subsequently served to
the intented victims.

HOW DOES A WEB CACHE WORK?
-------------------------

* The cache sits between the server and the user where it saves ( caches ) the responses to particular requests.
* If another user sends an equivalent request, the cache simply servers a copy of the cached response directly to the user without any interaction with the backend.
* Here, the purpose is to ease the load on the server by reducing the # of the duplicate requests.



Cache Keys
- - - - - 
* Caches identify equivalent requests by comparing a predefined subset of the request's component, known as the "cache key".
* Typically, this would containt the request line and "Host" header.
* Components of the request that are not included in the cache key are said to be "unkeyed".
* If the cache key of an incoming request matches the key of a previous request, then the cache considers them to be equivalant. As a result, it will serve a copy of the cached response that was generated for the original request.


IMPACTS of a web cache poisoning attack
- - - - - - - - - - - - - - - - - - - - 

* Depends on
	-> What exactly the attacker can sucessfully get cached
	-> The amount of traffic on the affected page 
 
Steps
- - - 
1- Identify and evaluate unkeyed inputs
2- Elicit a harmful response from the backend server
3- Get the response cached

1- Identify and evaluate unkeyed inputs
- - - - - - - - - - - - - - - - - - - - 


* We use Param Miner to identify unkeyed inputs.
	-> right click on a request that we want to investigate
	-> Click "Guess Headers"
	-> If a request containing one of its injected inputs has an effect on the response, Param Miner logs this in Burp. ( issues or output depending on the version )

2- Elicit a harmful response from the backend server
- - - - - - - - - - - - - - - - - - - - - - - - - - -
* If an input is reflected in the response from the server without being properly sanitized, or is used to dynamically generate other data, then this is a potential entry point for web cache poisoning. 

3- Get the response cached
- - - - - - - - - - - - - -
* There are a lot of factors that will determine wheter the response will be cached or not.


Using Web Cache Poisoning to deliver an XSS attack
- - - - - - - - - - - - - - - - - - - - - - - - - -

* Websites sometimes may reflect the unkeyed injected parameter to the javascript context.
* Then, we can make use of this fact to use XSS payloads.
